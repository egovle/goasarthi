
import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Eye, Badge as UIBadge } from 'lucide-react';
import { useAuth } from '@/hooks/useAuth.jsx';
import { useData } from '@/hooks/useData';
import { DocumentViewer } from '@/components/DocumentViewer';


export function AdminAssignTasks({ items, onAssignTask, getLatestRemark }) {
  const { DEMO_USERS } = useAuth();
  const { getVLEs } = useData();
  const ALL_VLES = getVLEs();

  const getAssignableVLEs = (item) => {
    let assignable = ALL_VLES.filter(vle => vle.is_available !== false);
    
    if (item.type === 'lead') {
      if (item.status === 'pending_assignment' || item.status === 'pending') {
        assignable = assignable.filter(vle => vle.id !== item.generated_by_vle_id);
      }
    }
    return assignable;
  };


  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-lg sm:text-xl">Unassigned/Rejected Tasks</CardTitle>
        <CardDescription>Items waiting for VLE assignment or re-assignment.</CardDescription>
      </CardHeader>
      <CardContent>
        {items.length === 0 ? (
          <p className="text-center text-gray-500 py-8">No tasks to assign.</p>
        ) : (
          <div className="space-y-4">
            {items.map(item => {
              const assignableVLEs = getAssignableVLEs(item);
              const generatingVLE = item.type === 'lead' && item.generated_by_vle_id ? ALL_VLES.find(v => v.id === item.generated_by_vle_id) : null;
              return (
                <div key={item.id} className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-3 sm:p-4 border rounded-lg">
                  <div className="flex-1 mb-2 sm:mb-0">
                    <h4 className="font-medium text-sm sm:text-base">{item.service_name} ({item.type}) {item.status === 'rejected' && <span className="text-red-500">(Rejected)</span>}</h4>
                    <p className="text-xs sm:text-sm text-gray-500">ID: {item.id} | Fee: â‚¹{item.fee}</p>
                    <p className="text-xs sm:text-sm text-gray-500">
                      Docs: {item.documents?.length || 0}
                      <Dialog>
                        <DialogTrigger asChild><Button variant="link" size="sm" className="p-0 h-auto ml-1"><Eye className="h-3 w-3"/></Button></DialogTrigger>
                        <DialogContent>
                          <DialogHeader><DialogTitle>View Documents for {item.service_name}</DialogTitle></DialogHeader>
                          <DocumentViewer documents={item.documents} />
                        </DialogContent>
                      </Dialog>
                    </p>
                    {item.type === 'lead' && (<p className="text-xs sm:text-sm text-gray-500">Customer: {item.customer_name} | Generated by: {generatingVLE ? `${generatingVLE.name} (${generatingVLE.user_id_custom})` : 'N/A'}</p>)}
                    {item.status === 'rejected' && <p className="text-xs text-red-500">Remark: {getLatestRemark(item)}</p>}
                  </div>
                  <div className="flex items-center gap-2 w-full sm:w-auto">
                    <Select onValueChange={(value) => value && onAssignTask(item, value)}>
                      <SelectTrigger className="w-full sm:w-auto">
                        <SelectValue placeholder="Assign to VLE..." />
                      </SelectTrigger>
                      <SelectContent>
                        {assignableVLEs.length > 0 ? assignableVLEs.map(vle => (
                          <SelectItem key={vle.id} value={vle.id}>{vle.name} ({vle.user_id_custom}) - {vle.center}</SelectItem>
                        )) : (
                          <div className="p-2 text-xs text-gray-500">No {ALL_VLES.some(vle => !vle.is_available) ? 'available VLEs' : 'other VLEs'} for assignment.</div>
                        )}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )
            })}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
